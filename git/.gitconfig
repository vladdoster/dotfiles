[user]
    email = mvdoster@gmail.com
    name = Vladislav Doster
[core]
    editor = nvim
    pager = less
    commentChar = ~
    ignorecase = true
# hooksPath = ~/.git_hooks # disabled for now because it no likey macos
[color]
    ui = true
[alias]
    a  = add
    aa = add -A
    ac = !git add -A && git commit
    acm = !git add -A && git commit -m
    b = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
    bD = branch -D
    bd = branch -d
    bmv = branch -m
    c  = commit
    ca  = commit --amend
    can  = commit --amend --no-edit
    cl = clone
    cm  = commit -m
    co = checkout
    cob = checkout -b
    cp = cherry-pick
    d = diff
    d1 = diff HEAD^
    d2 = diff HEAD^^
    dc = diff --cached
    dh = diff HEAD
    do = "!f() { git remote set-head origin -a && git diff origin/HEAD; }; f"
    dt = difftool
    dta = difftool --dir-diff
    i  = init
    is = "!f() { git checkout issues/$1; }; f"
    isb = "!f() { git checkout -b issues/$1; }; f"
    isbmv = "!f() { git branch -m issues/$1; }; f"
    ld = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git log origin/$BRANCH..$BRANCH --oneline; }; f"
    lf = log -u
    lg = log --stat --color
    ll = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    ls = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lt = log --graph --decorate --pretty=oneline --abbrev-commit
    ma = merge --abort
    mc = merge --continue
    mt = mergetool
    pf = push -u --force-with-lease
    prune = fetch --prune
    pu = push -u
    r = rebase
    ra = rebase --abort
    rc = rebase --continue
    rev = rev-parse HEAD
    rs   = reset
    rs1  = reset HEAD^
    rs2  = reset HEAD^^
    rsh  = reset --hard
    rsh1 = reset HEAD^ --hard
    rsh2 = reset HEAD^^ --hard
    s = status -sbu
    sh = show
    stash-all = stash save --include-untracked

    # Linting
    lr = "!f() { rubocop-git; }; f"
    uncommit = reset --soft HEAD^

[push]
    default = current
    followTags = true
[status]
    showUntrackedFiles = all
[pull]
    ff = only
    rebase = true
[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
[difftool]
    prompt = false
[diff]
    tool = difftool
[mergetool]
    prompt  = false
[merge]
    tool = mergetool
