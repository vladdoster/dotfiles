#!/usr/bin/env zsh
#
# Collection of common docker tasks
#

#
# helper functions
#
_dkr_is_running() {
  for (( n = 0; n < 4; n += 1 )); do
    if docker system info &>/dev/null; then
      return 0
    fi
    _log "$(_color y 'docker system unavailable...') [retry attempt $n/4]"
    sleep 5
  done
  return 1
}

_log() {
  builtin print -Pr -- $@
}

_color() {
  $(builtin type -p color 2>&1 > /dev/null)
  if [[ $? -ne 0 ]]; then
    local color=$1 style=$2 b=0
    builtin shift
    case $style in
      bold|b)           b=1; builtin shift ;;
      italic|i)         b=2; builtin shift ;;
      underline|u)      b=4; builtin shift ;;
      inverse|in)       b=7; builtin shift ;;
      strikethrough|s)  b=9; builtin shift ;;
    esac
    case $color in
      black|b)   builtin echo "\033[${b};30m${@}\033[0;m" ;;
      blue|bl)   builtin echo "\033[${b};34m${@}\033[0;m" ;;
      cyan|c)    builtin echo "\033[${b};36m${@}\033[0;m" ;;
      green|g)   builtin echo "\033[${b};32m${@}\033[0;m" ;;
      magenta|m) builtin echo "\033[${b};35m${@}\033[0;m" ;;
      red|r)     builtin echo "\033[${b};31m${@}\033[0;m" ;;
      white|w)   builtin echo "\033[${b};37m${@}\033[0;m" ;;
      yellow|y)  builtin echo "\033[${b};33m${@}\033[0;m" ;;
    esac
    return
  fi
  command color "$@"
}

#
# sandbox subcommands
#
_dkr_sandbox_run() {
    if [[ -n "$(docker image ls --filter=reference=sandbox --quiet)" ]]; then
    docker run \
      --hostname "sandbox" \
      --interactive \
      --mount source=sandbox,destination=/home \
      --platform linux/x86_64 \
      --tty \
      sandbox:latest
  else
    if _dkr_sandbox_build; then
      _dkr_sandbox_run
    else
      _log $(_color red "Error: Unable to run sandbox")
      return 1
    fi
  fi
}

_dkr_sandbox_build() {
  docker buildx build --load --platform linux/x86_64 --progress=plain --tag sandbox:latest -<<'EOF'
    FROM amd64/ubuntu
    ENV USER user
    ENV HOME /home/$USER
    ENV DEBIAN_FRONTEND noninteractive
    RUN apt-get update --quiet=2 \
    && apt-get install --assume-yes --no-install-recommends --quiet=2 \
        autoconf autogen automake \
        build-essential \
        ca-certificates cmake coreutils curl \
        file \
        git \
        make \
        openssl \
        stow subversion sudo \
        texinfo \
        wget \
        unzip \
        zsh
    RUN useradd \
      --create-home \
      --gid root --groups sudo \
      --home-dir /home/${USER} \
      --shell "$(which zsh)" \
      --uid 1001 \
      ${USER} \
    && mkdir -p /home/${USER}/.config \
    && echo "${USER} ALL=(ALL) NOPASSWD:ALL" >>/etc/sudoers \
    && passwd --delete ${USER} \
    && chown --recursive ${USER} /home/${USER}
    USER ${USER}
    WORKDIR ${HOME}
    RUN git clone https://github.com/vladdoster/dotfiles.git .config/dotfiles
    ENTRYPOINT ["zsh"]
    CMD ["-l"]
EOF
}
#
# sandbox command
#
_dkr_sandbox_usage() {
  _log $(_color green "Usage:")
  _log "  dkr sandbox [options] <command>"
  _log
  _log $(_color green "Options:")
  _log "  -h, --help          Output this help text and exit"
  _log
  _log $(_color green "Commands:")
  _log "  build             Remove all docker resources"
  _log "  run               Run ubuntu development sandbox"
}

_dkr_sandbox() {
  local cmd base help
  autoload -Uz is-at-least
  builtin zparseopts -D h=help -help=help
  if [[ -n $help ]]; then
    _dkr_usage
    return 0
  fi
  cmd="$1"
  if [[ -z $cmd ]]; then
    _dkr_sandbox_usage
    return 0
  fi
  if (( ! $+functions[_dkr_sandbox_${cmd}] )); then
    _log $(_color red "Command '$cmd' can not be found.")
    _dkr_sandbox_usage
    return 1
  fi
  if _dkr_is_running; then
    _dkr_sandbox_${cmd} "${(@)@:2}"
  fi
}


#
# nuke command
#
_dkr_nuke_usage() {
  _log $(_color green "Usage:")
  _log "  dkr nuke [options]"
  _log
  _log $(_color green "Options:")
  _log "  -h, --help          Output this help text and exit"
}

_dkr_nuke() {
  builtin emulate -L zsh -o EXTENDED_GLOB
  local opt_help
  zmodload zsh/zutil
  builtin zparseopts -D h=opt_help -help=opt_help || return 1
  if [[ -n $opt_help ]]; then
    _dkr_nuke_usage
    return 0
  fi
  if [[ $# -gt 0 ]]; then
    _log $(_color red "Command 'nuke' command takes no arguments")
    return 1
  fi
  if _dkr_is_running; then
    _log "$(_color green 'Nuking docker...')"
    for resource in 'container' 'image'; do
      local -a resources=( $(docker "$resource" ls ${(Q)resource_opts} --quiet) )
      if (( ${#resources} > 0 )); then
        _log "$(_color cyan "Removing ${#resources} ${resource}s...")"
        for id in $resources; docker "$resource" rm --force "$id"
      fi
    done
    _log "$(_color cyan 'Pruning docker system resources...')"
    docker system prune --all --force
  fi
}

#
# main dkr command
#
_dkr_usage() {
  _log
  _log $(_color green "Usage:")
  _log "  dkr [options] <command>"
  _log
  _log $(_color green "Options:")
  _log "  -h, --help          Output this help text and exit"
  _log
  _log $(_color green "Commands:")
  _log "  sandbox               Run ubuntu development sandbox"
  _log "  nuke                  Remove all docker resources"
}

__dkr() {
  local cmd base help
  base=${dkr_DIR:-"${ZDOTDIR:-$HOME}/.dkr"}
  config=${dkr_CONFIG_DIR:-"${ZDOTDIR:-$HOME}/.config/dkr"}
  builtin zparseopts -D h=help -help=help
  if [[ -n $help ]]; then
    _dkr_usage
    return 0
  fi
  cmd="$1"
  if [[ -z $cmd || $cmd == ' ' ]]; then
    builtin print -Pr -- '     _____          ___           ___      '
    builtin print -Pr -- '    /  /::\        /__/|         /  /\     '
    builtin print -Pr -- '   /  /:/\:\      |  |:|        /  /::\    '
    builtin print -Pr -- '  /  /:/  \:\     |  |:|       /  /:/\:\   '
    builtin print -Pr -- ' /__/:/ \__\:|  __|  |:|      /  /:/~/:/   '
    builtin print -Pr -- ' \  \:\ /  /:/ /__/\_|:|____ /__/:/ /:/___ '
    builtin print -Pr -- '  \  \:\  /:/  \  \:\/:::::/ \  \:\/:::::/ '
    builtin print -Pr -- '   \  \:\/:/    \  \::/~~~~   \  \::/~~~~  '
    builtin print -Pr -- '    \  \::/      \  \:\        \  \:\      '
    builtin print -Pr -- '     \__\/        \  \:\        \  \:\     '
    builtin print -Pr -- '                   \__\/         \__\/     '
    _dkr_usage
    return 0
  fi
  if (( ! $+functions[_dkr_${cmd}] )); then
    _log $(_color red "Command '$cmd' can not be found.")
    _dkr_usage
    return 1
  fi
  _dkr_${cmd} "${(@)@:2}"
}

__dkr $@

# vim: set expandtab filetype=zsh shiftwidth=4 softtabstop=4 tabstop=4:
