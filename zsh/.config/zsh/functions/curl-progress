emulate -L sh -o no_multi_byte -o extended_glob
if [ -t 2 ]; then
  exec 4>&2
else
  exec 4> /dev/null
fi
if [ -z "$TMPDIR" ]; then
  TMP="/tmp"
else
  TMP="${TMPDIR%/}"
fi
basename="$TMP/$(date "+%Y%m%d%H%M%S").$$"
tracefile="$basename.trace"
statusfile="$basename.status"
rm -f "$tracefile" "$statusfile"
shutdown() {
  if [ -f "$statusfile" ]; then
    local status_file="$(cat "$statusfile")"
  else
    local status_file="1"
  fi
  if [ "$status_file" -eq 0 ]; then
    printf "\x1B[0G\x1B[0K" >&4
  else
    echo >&4
  fi
  rm -f "$tracefile" "$statusfile"
  kill %+ 2> /dev/null
  trap - SIGINT SIGTERM ERR EXIT
  exit "$status_file"
}
trap "shutdown" SIGINT SIGTERM ERR EXIT
mkfifo "$tracefile"
(
  set +e
  curl --trace-ascii "$tracefile" --output test -s "$@"
  echo "$?" > "$statusfile"
  echo >> "$tracefile"
) \
  &
unbuffered_sed() {
  if echo | sed -u > /dev/null 2>&1; then
    sed -nu "$@"
  elif echo | sed -l > /dev/null 2>&1; then
    sed -nl "$@"
  else
    local pad="$(printf "\n%512s" "")"
    sed -ne "s/$/\\$pad/" "$@"
  fi
}
print_progress() {
  local bytes="$1"
  local length="$2"
  [ "$length" -gt 8192 ] || return 0
  local columns="$(tput cols)"
  columns=100
  local width=$((columns - 10))
  local percent=$((bytes * 100 / length))
  local on=$((bytes * width / length))
  local off=$((width - on))
  printf "\x1B[0G %-6s\x1B[7m%*s\x1B[0m%*s\x1B[27m" \
    "$percent%" "$on" "" "$off" "" | tee progress$$.txt >&4
}
unbuffered_sed \
  -e 'y/ACDEGHLNORTV/acdeghlnortv/' \
  -e '/^0000: content-length:/p' \
  -e '/^<= recv data/p' \
  "$tracefile" | {
  length=0
  bytes=0
  while IFS=" " read -A line; do
    tag="${line[0]} ${line[1]}"
    if [ "$tag" = "0000: content-length:" ]; then
      length="${line[2]}"
      bytes=0
    elif [ "$tag" = "<= recv" ]; then
      size="${line[3]}"
      bytes=$((bytes + size))
      print_progress "$bytes" "$length"
    fi
  done
}
