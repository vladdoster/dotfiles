#autoload
# vim: set et:ft=zsh:sw=2:st=2:ts=2:tw=100:

emulate -L zsh
setopt extended_glob pushd_silent
zmodload zsh/zutil || return 1

opt_help= opt_edit=
cli_usage=("Usage: $0 [-h|--help] [-e|--edit] [function]")
zparseopts -D -F -K -- {e,-edit}=opt_edit {h,-help}=opt_help || return 1

if [[ -n "$opt_help" ]]; then
    builtin print -l $cli_usage && return
fi
if (( $#@ )); then
    if [[ -d $HOME/.config/zsh/functions ]]; then
        command touch $HOME/.config/zsh/functions/${1}
        command chmod 755 $HOME/.config/zsh/functions/${1}
        cat <<EOF >| $HOME/.config/zsh/functions/${1}
#autoload
#
# ${1}
#
$(builtin print -- '')
__${1}_usage () {
    print -- 'Usage: ${1} [options] [arguments...]'
    print -- 'Options:'
    print -- '  -d, --debug        turn on execution tracing'
    print -- '  -h, --help         show list of command-line options'
}
$(builtin print -- '')
setopt localoptions extended_glob
zmodload zsh/zutil || return 1
$(builtin print -- '')
local base debug dryrun help
builtin zparseopts -D -E -F -K \\
    d=debug -debug=debug \\
    h=help  -help=help   \\
    || return 1
$(builtin print -- '')
if (( \$#help )); then
  __${1}_usage
  return 0
fi
if (( \$#debug )); then
  setopt xtrace
fi
$(builtin print -- '')
local -a arguments=(\${(q+)^@})
$(builtin print -- '')
print -l -- "\${#arguments} args" \${(@)arguments}
$(builtin print -- '')
# vim: set expandtab filetype=zsh shiftwidth=2 softtabstop=2 tabstop=2:
EOF
        if [[ -n "$opt_edit" ]]; then
            nvim $1
        fi
        builtin print -- "==> Created $1 function"
    fi
else
    builtin print -P -- "%F{red}Error%f: $0 requires a function name"
    return 1
fi
return 0
