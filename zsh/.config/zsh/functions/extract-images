#autoload
# Example function that extracts all images from an XML/HTML file.
#
# Usage:
#   autoload -Uz extract-images
#   local -a reply=()
#   extract-images <file>
#   print -c -- $reply
#



# `emulate zsh` resets script-relevant options to default zsh.
# `-L` makes this effect local to this function and its descendants.
# `-o ...` sets a shell option.
# https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation
emulate -L zsh -o EXTENDED_GLOB
# EXTENDED_GLOB gives us access to additional pattern matching constructs needed
# below.

# Note: `emulate bash` does not work as expected, because `emulate` does not
# know 'bash'. It will activate `sh` emulation instead, because 'bash' end in
# 'sh'! If you need `bash` compatibility, try `emulate ksh`.

# Declare which field separators to use for ${=...}, below.
# +h preserves the "specialness" of $IFS for our local version of it.
# https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell
# https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-typeset
local +h IFS='<>"()'

# < $1 redirects the contents of file $1 to standard output.
# $( ... ) captures standard output in a string.
# "..." ensures all whitespace inside, incl. newlines, is kept as is.
# ${=...} splits the string on $IFS.
# reply=( ... ) places the resulting strings into array $reply.
reply=( ${="$( < $1 )"} )

#                  [@]:  For each string,
#                  (M):  keep the longest substring ("match") that
#                   ##:  starts at the beginning of the string and
#  *.(gif|jpg|png|svg):  ends with .gif, .jpg, .png or .svg.
# If there is no such substring, discard the entire string (since we did not
# wrap the expression in "double quotes").
# https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion
reply=( ${(M)reply[@]##*.(gif|jpg|png|svg)} )

#          [@]:  For each string,
#           ##:  remove, from the beginning of the string,
# [[:blank:]]#:  all spaces and tabs, if any.
#                Then, in the resulting array of strings,
#          (u):  discard all duplicate strings ("unique") and
#          (i):  sort case-insensitively.
reply=( ${(ui)reply[@]##[[:blank:]]#} )

# Return 0 (success) if $reply contains any elements.
# Otherwise, return 1 (failure).
(( $#reply ))

# (( ... )) creates an arithmetic expression.
# If an arithmetic expression evaluates to 0 (false), it returns 1 (failure).
# If it evaluates to any other value (true), it returns 0 (success).
# https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html

# A function always returns the same exit status as its last expression.
