#autoload
# vim: set et ft=zsh sw=4 st=4 ts=4:
#
# Example function that extracts all images from an XML/HTML file.
#
# Usage:
#   autoload -Uz extract-images
#   local -a reply=()
#   extract-images <file>
#   print -c -- $reply
#

# Note: `emulate bash` does not work as expected, because `emulate` does not
# know 'bash'. It will activate `sh` emulation instead, because 'bash' end in
# 'sh'! If you need `bash` compatibility, try `emulate ksh`.

# `emulate zsh`:  resets script-relevant options to default zsh
#          `-L`:  makes this effect local to this function and its descendants
#      `-o ...`:  sets a shell option
# EXTENDED_GLOB:  enables additional pattern matching constructs
# https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation
builtin emulate -L zsh -o EXTENDED_GLOB


# Declare which field separators to use for ${=...}, below.
# https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell
# https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-typeset
#
# +h: preserves the "specialness" of ${IFS} for our local version of it
local +h IFS='<>"()'

# < $1 redirects the contents of file $1 to standard output.
#      $( ... ):  captures standard output in a string
#         "...":  ensures all whitespace inside, incl. newlines, is kept as is
#       ${=...}:  splits the string on ${IFS}
# reply=( ... ):  places the resulting strings into array ${reply}
local reply=( ${="$( < $1 )"} )

# If there is no such substring, discard the entire string (since we did not
# wrap the expression in "double quotes").
# https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion
#
#                 [@]:  for each string
#                 (M):  keep the longest substring ("match") that
#                  ##:  starts at the beginning of the string and
# *.(gif|jpg|png|svg):  ends with .gif, .jpg, .png or .svg.
reply=( ${(M)reply[@]##*.(gif|jpg|png|svg)} )

#          [@]:  For each string,
#           ##:  remove, from the beginning of the string,
# [[:blank:]]#:  all spaces and tabs, if any.
#
# For each index in resulting array of strings,
#          (u):  discard all duplicate strings ("unique") and
#          (i):  sort case-insensitively.
reply=( ${(ui)reply[@]##[[:blank:]]#} )

# Return
# 0:  if ${reply} contains any elements
# 1:  if ${reply} empty
(( $#reply ))

# (( ... )) creates an arithmetic expression.
# If an arithmetic expression evaluates to 0 (false), it returns 1 (failure).
# If it evaluates to any other value (true), it returns 0 (success).
# https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html

# A function always returns the same exit status as its last expression.
