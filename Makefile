nvim_cfg=~/.config/nvim
nvim_cfg_repo=https://github.com/vladdoster/neovim-configuration.git

.DEFAULT_GOAL := install
.ONESHELL:

help: ## Display all Makfile targets
		@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
		| sort \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

activate_brew:
	eval $$(/opt/homebrew/bin/brew shellenv)

fmt:
	@find . -name '*.lua' -print -exec \
	lua-format --in-place \
	           --align-parameter \
             --no-break-after-table-lb \
             --no-break-before-table-rb \
	           --align-table-field \
	           --chop-down-kv-table \
	           --chop-down-table \
	           --column-limit=120 \
	           --column-table-limit 100 \
	           --double-quote-to-single-quote \
	           --keep-simple-control-block-one-line \
	           --keep-simple-function-one-line \
	           --no-break-after-functioncall-lp \
	           --no-extra-sep-at-table-end \
	           --no-spaces-around-equals-in-field \
	           --no-spaces-inside-table-braces \
	           {} \;

install: | clean $(nvim_cfg) ## Deploy dotfiles via GNU install
		find * -maxdepth 0 -type d -exec stow --verbose 1 {} --target $$HOME \;

.SILENT: clean
clean: ## Remove deployed dotfiles
		find "$$PWD" -type f -name "*.DS_Store" -print -delete
		$(info --- cleaned .DS_Store files)
		find * -maxdepth 0 -type d -exec stow --verbose 1 --target $$HOME --delete {} \;
		$(info --- removed linked dotfiles)
		rm -rf $HOME/{.cache,.config/nvim/lua/packer_compiled.lua,.local/share/nvim}
		$(info --- removed files generated by nvim & zsh)

$(nvim_cfg): ## Clone Neovim config $HOME/.config/nvim
		$(info --- did not found nvim config, fetching..)
		git clone --progress --quiet $(nvim_cfg_repo) $(nvim_cfg)

stow: ## Install GNU stow
	$(info --- installing GNU stow)
	git clone https://github.com/aspiers/stow
	cd stow && autoreconf -iv && ./configure --prefix $$PWD && make install
	$(info --- installed GNU stow)

brew-install: ## Install Homebrew pkg manager
		/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

brew-uninstall: ## Uninstall Homebrew pkg manager
		@/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"

brew-bundle: ## Install programs defined in $HOME/.config/dotfiles/Brewfile
		brew bundle --zap --cleanup --force --file "$$(pwd)"/Brewfile

brew-fix: ## Re-install Homebrew taps homebrew-core & homebrew-cask
		$(info --- adding git remote to origin)
		#  rm -rf "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-"{core,cask}
		git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" prune origin
		git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" remote remove origin
		git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" remote add origin https://github.com/Homebrew/homebrew-core
		brew tap homebrew/core
		git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask" prune origin
		git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask" remote remove origin
		git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask" remote add origin https://github.com/Homebrew/homebrew-cask
		brew tap homebrew/cask

linuxbrew-fix: ## Re-install Linuxbrew taps homebrew-core & homebrew-cask
		$(info --- adding git remote to origin)
		git -C "/home/linuxbrew/.linuxbrew/Homebrew" remote add origin https://github.com/Homebrew/brew
		brew tap homebrew/core
		brew tap homebrew/cask

all-prog: py-prog rust-prog ## Install Python & Rust programs

pip-update: ## Update Python packages
		@pip3 list --user \
		| cut -d" " -f 1 \
		| tail -n +3 \
		| xargs pip3 install --user --upgrade --trusted-host pypi.org --trusted-host files.pythonhosted.org

py-prog: ## Install Python dependencies
		@python3 -m pip install --upgrade pip
		@python3 -m pip install --upgrade --trusted-host pypi.org --trusted-host files.pythonhosted.org \
		autopep8 \
		black bpytop \
		flake8 \
		isort \
		mdformat \
		mdformat-config mdformat-gfm \
		mdformat-shfmt mdformat-tables \
		pynvim \
		tox \
		yapf
		@echo "--- installed python packages"

rust-install: ## Install Rust & Cargo pkg manager via Rustup
		@curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

rust-uninstall: ## Uninstall Rust
		@rustup self uninstall

rust-prog: ## Install programs via rust
	cargo install bat \
		      cargo-update \
		      exa \
		      stylua \
		      topgrade

build-container: ## Build containerized env and install dotfiles
		docker buildx build \
			--compress \
			--platform linux/amd64 \
			--rm \
			--tag df-ubuntu:latest \
			$$PWD

run-container: build-container ## Run containerized dockerfiles env
		docker run \
			--interactive \
			--tty \
			df-ubuntu:latest
