#!/usr/bin/env bash

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# focus window
# ctrl - h : yabai -m window --focus west
# ctrl - j : yabai -m window --focus south
# ctrl - k : yabai -m window --focus north
# ctrl - l : yabai -m window --focus east

# swap managed window
shift + ctrl - h : yabai -m window --swap west
shift + ctrl - j : yabai -m window --swap south
shift + ctrl - k : yabai -m window --swap north
shift + ctrl - l : yabai -m window --swap east

# increase window size
ctrl + alt - h: yabai -m window --resize left:0:20
ctrl + alt - j: yabai -m window --resize top:20:0
ctrl + alt - k: yabai -m window --resize bottom:0:20
ctrl + alt - l: yabai -m window --resize right:20:0

# decrease window size
shift + ctrl + alt - h: yabai -m window --resize left:-20:0
shift + ctrl + alt - j: yabai -m window --resize top:0:-20
shift + ctrl + alt - k: yabai -m window --resize bottom:-20:0
shift + ctrl + alt - l: yabai -m window --resize right:0:-20

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20


# toggle window zoom
alt - z: yabai -m window --toggle zoom-parent

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - f: yabai -m window --toggle float;\
         yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
shift + ctrl - p: yabai -m window --toggle sticky; \
              yabai -m window --toggle topmost;\
              yabai -m window --toggle pip

shift + alt - p: yabai -m window --toggle sticky; \
                 yabai -m window --toggle topmost;\
                 yabai -m window --grid   5:5:4:0:1:1

# vim:ft=bash:sw=2:sts=2:et
